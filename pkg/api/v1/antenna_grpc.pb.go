// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntennaServiceClient is the client API for AntennaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntennaServiceClient interface {
	// StartLocalAntenna starts an Antenna on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the antenna/config.yaml
	//   3. all bytes constituting the Antenna YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalAntenna(ctx context.Context, opts ...grpc.CallOption) (AntennaService_StartLocalAntennaClient, error)
	// StartFromPreviousAntenna starts a new Antenna based on a previous one.
	// If the previous Antenna does not have the can-replay condition set this call will result in an error.
	StartFromPreviousAntenna(ctx context.Context, in *StartFromPreviousAntennaRequest, opts ...grpc.CallOption) (*StartAntennaResponse, error)
	// StartAntennaRequest starts a new Antenna based on its specification.
	StartAntenna(ctx context.Context, in *StartAntennaRequest, opts ...grpc.CallOption) (*StartAntennaResponse, error)
	// Searches for Antenna(s) known to this Antenna
	ListAntennas(ctx context.Context, in *ListAntennasRequest, opts ...grpc.CallOption) (*ListAntennasResponse, error)
	// Subscribe listens to new Antenna(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (AntennaService_SubscribeClient, error)
	// GetAntenna retrieves details of a single Antenna
	GetAntenna(ctx context.Context, in *GetAntennaRequest, opts ...grpc.CallOption) (*GetAntennaResponse, error)
	// Listen listens to Antenna updates and log output of a running Antenna
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (AntennaService_ListenClient, error)
	// StopAntenna stops a currently running Antenna
	StopAntenna(ctx context.Context, in *StopAntennaRequest, opts ...grpc.CallOption) (*StopAntennaResponse, error)
}

type antennaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntennaServiceClient(cc grpc.ClientConnInterface) AntennaServiceClient {
	return &antennaServiceClient{cc}
}

func (c *antennaServiceClient) StartLocalAntenna(ctx context.Context, opts ...grpc.CallOption) (AntennaService_StartLocalAntennaClient, error) {
	stream, err := c.cc.NewStream(ctx, &AntennaService_ServiceDesc.Streams[0], "/v1.AntennaService/StartLocalAntenna", opts...)
	if err != nil {
		return nil, err
	}
	x := &antennaServiceStartLocalAntennaClient{stream}
	return x, nil
}

type AntennaService_StartLocalAntennaClient interface {
	Send(*StartLocalAntennaRequest) error
	CloseAndRecv() (*StartAntennaResponse, error)
	grpc.ClientStream
}

type antennaServiceStartLocalAntennaClient struct {
	grpc.ClientStream
}

func (x *antennaServiceStartLocalAntennaClient) Send(m *StartLocalAntennaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *antennaServiceStartLocalAntennaClient) CloseAndRecv() (*StartAntennaResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartAntennaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *antennaServiceClient) StartFromPreviousAntenna(ctx context.Context, in *StartFromPreviousAntennaRequest, opts ...grpc.CallOption) (*StartAntennaResponse, error) {
	out := new(StartAntennaResponse)
	err := c.cc.Invoke(ctx, "/v1.AntennaService/StartFromPreviousAntenna", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antennaServiceClient) StartAntenna(ctx context.Context, in *StartAntennaRequest, opts ...grpc.CallOption) (*StartAntennaResponse, error) {
	out := new(StartAntennaResponse)
	err := c.cc.Invoke(ctx, "/v1.AntennaService/StartAntenna", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antennaServiceClient) ListAntennas(ctx context.Context, in *ListAntennasRequest, opts ...grpc.CallOption) (*ListAntennasResponse, error) {
	out := new(ListAntennasResponse)
	err := c.cc.Invoke(ctx, "/v1.AntennaService/ListAntennas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antennaServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (AntennaService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AntennaService_ServiceDesc.Streams[1], "/v1.AntennaService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &antennaServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AntennaService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type antennaServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *antennaServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *antennaServiceClient) GetAntenna(ctx context.Context, in *GetAntennaRequest, opts ...grpc.CallOption) (*GetAntennaResponse, error) {
	out := new(GetAntennaResponse)
	err := c.cc.Invoke(ctx, "/v1.AntennaService/GetAntenna", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antennaServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (AntennaService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &AntennaService_ServiceDesc.Streams[2], "/v1.AntennaService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &antennaServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AntennaService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type antennaServiceListenClient struct {
	grpc.ClientStream
}

func (x *antennaServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *antennaServiceClient) StopAntenna(ctx context.Context, in *StopAntennaRequest, opts ...grpc.CallOption) (*StopAntennaResponse, error) {
	out := new(StopAntennaResponse)
	err := c.cc.Invoke(ctx, "/v1.AntennaService/StopAntenna", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntennaServiceServer is the server API for AntennaService service.
// All implementations must embed UnimplementedAntennaServiceServer
// for forward compatibility
type AntennaServiceServer interface {
	// StartLocalAntenna starts an Antenna on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the antenna/config.yaml
	//   3. all bytes constituting the Antenna YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalAntenna(AntennaService_StartLocalAntennaServer) error
	// StartFromPreviousAntenna starts a new Antenna based on a previous one.
	// If the previous Antenna does not have the can-replay condition set this call will result in an error.
	StartFromPreviousAntenna(context.Context, *StartFromPreviousAntennaRequest) (*StartAntennaResponse, error)
	// StartAntennaRequest starts a new Antenna based on its specification.
	StartAntenna(context.Context, *StartAntennaRequest) (*StartAntennaResponse, error)
	// Searches for Antenna(s) known to this Antenna
	ListAntennas(context.Context, *ListAntennasRequest) (*ListAntennasResponse, error)
	// Subscribe listens to new Antenna(s) updates
	Subscribe(*SubscribeRequest, AntennaService_SubscribeServer) error
	// GetAntenna retrieves details of a single Antenna
	GetAntenna(context.Context, *GetAntennaRequest) (*GetAntennaResponse, error)
	// Listen listens to Antenna updates and log output of a running Antenna
	Listen(*ListenRequest, AntennaService_ListenServer) error
	// StopAntenna stops a currently running Antenna
	StopAntenna(context.Context, *StopAntennaRequest) (*StopAntennaResponse, error)
	mustEmbedUnimplementedAntennaServiceServer()
}

// UnimplementedAntennaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAntennaServiceServer struct {
}

func (UnimplementedAntennaServiceServer) StartLocalAntenna(AntennaService_StartLocalAntennaServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalAntenna not implemented")
}
func (UnimplementedAntennaServiceServer) StartFromPreviousAntenna(context.Context, *StartFromPreviousAntennaRequest) (*StartAntennaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousAntenna not implemented")
}
func (UnimplementedAntennaServiceServer) StartAntenna(context.Context, *StartAntennaRequest) (*StartAntennaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAntenna not implemented")
}
func (UnimplementedAntennaServiceServer) ListAntennas(context.Context, *ListAntennasRequest) (*ListAntennasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAntennas not implemented")
}
func (UnimplementedAntennaServiceServer) Subscribe(*SubscribeRequest, AntennaService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAntennaServiceServer) GetAntenna(context.Context, *GetAntennaRequest) (*GetAntennaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAntenna not implemented")
}
func (UnimplementedAntennaServiceServer) Listen(*ListenRequest, AntennaService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedAntennaServiceServer) StopAntenna(context.Context, *StopAntennaRequest) (*StopAntennaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAntenna not implemented")
}
func (UnimplementedAntennaServiceServer) mustEmbedUnimplementedAntennaServiceServer() {}

// UnsafeAntennaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntennaServiceServer will
// result in compilation errors.
type UnsafeAntennaServiceServer interface {
	mustEmbedUnimplementedAntennaServiceServer()
}

func RegisterAntennaServiceServer(s grpc.ServiceRegistrar, srv AntennaServiceServer) {
	s.RegisterService(&AntennaService_ServiceDesc, srv)
}

func _AntennaService_StartLocalAntenna_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AntennaServiceServer).StartLocalAntenna(&antennaServiceStartLocalAntennaServer{stream})
}

type AntennaService_StartLocalAntennaServer interface {
	SendAndClose(*StartAntennaResponse) error
	Recv() (*StartLocalAntennaRequest, error)
	grpc.ServerStream
}

type antennaServiceStartLocalAntennaServer struct {
	grpc.ServerStream
}

func (x *antennaServiceStartLocalAntennaServer) SendAndClose(m *StartAntennaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *antennaServiceStartLocalAntennaServer) Recv() (*StartLocalAntennaRequest, error) {
	m := new(StartLocalAntennaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AntennaService_StartFromPreviousAntenna_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousAntennaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntennaServiceServer).StartFromPreviousAntenna(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AntennaService/StartFromPreviousAntenna",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntennaServiceServer).StartFromPreviousAntenna(ctx, req.(*StartFromPreviousAntennaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntennaService_StartAntenna_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAntennaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntennaServiceServer).StartAntenna(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AntennaService/StartAntenna",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntennaServiceServer).StartAntenna(ctx, req.(*StartAntennaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntennaService_ListAntennas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAntennasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntennaServiceServer).ListAntennas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AntennaService/ListAntennas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntennaServiceServer).ListAntennas(ctx, req.(*ListAntennasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntennaService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AntennaServiceServer).Subscribe(m, &antennaServiceSubscribeServer{stream})
}

type AntennaService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type antennaServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *antennaServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AntennaService_GetAntenna_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAntennaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntennaServiceServer).GetAntenna(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AntennaService/GetAntenna",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntennaServiceServer).GetAntenna(ctx, req.(*GetAntennaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntennaService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AntennaServiceServer).Listen(m, &antennaServiceListenServer{stream})
}

type AntennaService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type antennaServiceListenServer struct {
	grpc.ServerStream
}

func (x *antennaServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AntennaService_StopAntenna_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAntennaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntennaServiceServer).StopAntenna(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AntennaService/StopAntenna",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntennaServiceServer).StopAntenna(ctx, req.(*StopAntennaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntennaService_ServiceDesc is the grpc.ServiceDesc for AntennaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntennaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AntennaService",
	HandlerType: (*AntennaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousAntenna",
			Handler:    _AntennaService_StartFromPreviousAntenna_Handler,
		},
		{
			MethodName: "StartAntenna",
			Handler:    _AntennaService_StartAntenna_Handler,
		},
		{
			MethodName: "ListAntennas",
			Handler:    _AntennaService_ListAntennas_Handler,
		},
		{
			MethodName: "GetAntenna",
			Handler:    _AntennaService_GetAntenna_Handler,
		},
		{
			MethodName: "StopAntenna",
			Handler:    _AntennaService_StopAntenna_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalAntenna",
			Handler:       _AntennaService_StartLocalAntenna_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _AntennaService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _AntennaService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "antenna.proto",
}
