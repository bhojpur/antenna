// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntennaUIClient is the client API for AntennaUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntennaUIClient interface {
	// ListAntennaSpecs returns a list of Antenna(s) that can be started through the UI.
	ListAntennaSpecs(ctx context.Context, in *ListAntennaSpecsRequest, opts ...grpc.CallOption) (AntennaUI_ListAntennaSpecsClient, error)
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error)
}

type antennaUIClient struct {
	cc grpc.ClientConnInterface
}

func NewAntennaUIClient(cc grpc.ClientConnInterface) AntennaUIClient {
	return &antennaUIClient{cc}
}

func (c *antennaUIClient) ListAntennaSpecs(ctx context.Context, in *ListAntennaSpecsRequest, opts ...grpc.CallOption) (AntennaUI_ListAntennaSpecsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AntennaUI_ServiceDesc.Streams[0], "/v1.AntennaUI/ListAntennaSpecs", opts...)
	if err != nil {
		return nil, err
	}
	x := &antennaUIListAntennaSpecsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AntennaUI_ListAntennaSpecsClient interface {
	Recv() (*ListAntennaSpecsResponse, error)
	grpc.ClientStream
}

type antennaUIListAntennaSpecsClient struct {
	grpc.ClientStream
}

func (x *antennaUIListAntennaSpecsClient) Recv() (*ListAntennaSpecsResponse, error) {
	m := new(ListAntennaSpecsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *antennaUIClient) IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error) {
	out := new(IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/v1.AntennaUI/IsReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntennaUIServer is the server API for AntennaUI service.
// All implementations must embed UnimplementedAntennaUIServer
// for forward compatibility
type AntennaUIServer interface {
	// ListAntennaSpecs returns a list of Antenna(s) that can be started through the UI.
	ListAntennaSpecs(*ListAntennaSpecsRequest, AntennaUI_ListAntennaSpecsServer) error
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error)
	mustEmbedUnimplementedAntennaUIServer()
}

// UnimplementedAntennaUIServer must be embedded to have forward compatible implementations.
type UnimplementedAntennaUIServer struct {
}

func (UnimplementedAntennaUIServer) ListAntennaSpecs(*ListAntennaSpecsRequest, AntennaUI_ListAntennaSpecsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAntennaSpecs not implemented")
}
func (UnimplementedAntennaUIServer) IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}
func (UnimplementedAntennaUIServer) mustEmbedUnimplementedAntennaUIServer() {}

// UnsafeAntennaUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntennaUIServer will
// result in compilation errors.
type UnsafeAntennaUIServer interface {
	mustEmbedUnimplementedAntennaUIServer()
}

func RegisterAntennaUIServer(s grpc.ServiceRegistrar, srv AntennaUIServer) {
	s.RegisterService(&AntennaUI_ServiceDesc, srv)
}

func _AntennaUI_ListAntennaSpecs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAntennaSpecsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AntennaUIServer).ListAntennaSpecs(m, &antennaUIListAntennaSpecsServer{stream})
}

type AntennaUI_ListAntennaSpecsServer interface {
	Send(*ListAntennaSpecsResponse) error
	grpc.ServerStream
}

type antennaUIListAntennaSpecsServer struct {
	grpc.ServerStream
}

func (x *antennaUIListAntennaSpecsServer) Send(m *ListAntennaSpecsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AntennaUI_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntennaUIServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AntennaUI/IsReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntennaUIServer).IsReadOnly(ctx, req.(*IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntennaUI_ServiceDesc is the grpc.ServiceDesc for AntennaUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntennaUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AntennaUI",
	HandlerType: (*AntennaUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReadOnly",
			Handler:    _AntennaUI_IsReadOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAntennaSpecs",
			Handler:       _AntennaUI_ListAntennaSpecs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "antenna-ui.proto",
}
